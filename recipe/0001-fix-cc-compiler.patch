diff --git a/setup.py b/setup.py
index 3e52a961..2a1da149 100755
--- a/setup.py
+++ b/setup.py
@@ -79,7 +79,7 @@ else:
     fin, fout, ferr = (p.stdin, p.stdout, p.stderr)
     output = ferr.readlines()[-1].decode('utf8')
     try:
-        version = re.match('.*gcc version\s*(\d+).(\d+).(\d+).*', output).groups()
+        version = re.match(r'.*gcc version\s*(\d+).(\d+).(\d+).*', output).groups()
         if int(version[0]) < 4 or int(version[1]) < 2:
             print('Support for openMP is turned off because version %s.%s.%s of gcc does not support this feature' % version)
             USE_OPENMP = False
@@ -402,6 +402,8 @@ if not os.path.isdir('build'):
 
 COMMON_MACROS = [
     ('BOOST_UBLAS_NDEBUG', None),
+    ('BOOST_NO_CXX98_FUNCTION_BASE', None),
+    ('BOOST_COMPUTE_USE_CPP11', None),
     ('_HAS_ITERATOR_DEBUGGING', 0),
     ('BOOST_ALL_NO_LIB', None),
     ('NO_ZLIB', 0),
@@ -535,6 +537,7 @@ def try_compile(body='', ext='.cpp'):
             oldstderr = os.dup(sys.stderr.fileno())
             os.dup2(devnull.fileno(), sys.stderr.fileno())
             cc = new_compiler()
+            distutils.sysconfig.customize_compiler(cc)
             objects = cc.compile([fname], output_dir=tmpdir)
         except:
             return False
@@ -650,6 +653,7 @@ if __name__ == '__main__':
             # try to get
             print('Building static libraries')
             c = new_compiler(verbose=1)
+            distutils.sysconfig.customize_compiler(c)
             # -w suppress all warnings caused by the use of boost libraries
             objects = c.compile(LIB_FILES,
                 include_dirs=['gsl', 'gsl/specfunc', 'build', '.', boost_include_dir] + common_extra_include_dirs,
diff --git a/src/utility.h b/src/utility.h
index 6769ae26..995be02d 100644
--- a/src/utility.h
+++ b/src/utility.h
@@ -1775,13 +1775,29 @@ void closeOutput(const string & output = string());
 class RNG_func
 {
 public:
+	typedef unsigned long int result_type;
+
 	RNG_func(gsl_rng * rng) : m_RNG(rng)
 	{
 
 	}
 
+	result_type min()
+	{
+		return gsl_rng_min();
+	}
+
+	result_type max()
+	{
+		return gsl_rng_max() - 1;
+	}
+
+	result_type operator()() const
+	{
+		return gsl_rng_uniform_int(m_RNG, gsl_rng_max());
+	}
 
-	unsigned long int operator()(unsigned long int N) const
+	result_type operator()(result_type N) const
 	{
 		return gsl_rng_uniform_int(m_RNG, N);
 	}
@@ -1981,7 +1997,12 @@ public:
 		// generator.
 		RNG_func rng(m_RNG);
 
+#ifdef BOOST_COMPUTE_USE_CPP11
+		std::shuffle(begin, end, rng);
+#else
 		std::random_shuffle(begin, end, rng);
+#endif
+
 	}
 
 
